version: '3.7'
services:

  mjpeg-streamer:
    build:
      context: ./mjpeg-streamer/
      dockerfile: Dockerfile.mjpeg-streamer
      args:
        - VIDEO_DEVICE=${VIDEO_DEVICE:-/dev/video0}
        - SERVER_TCP_PORT=${SERVER_TCP_PORT:-9081}
    image: xe1gyq/mjpeg-streamer
    container_name: services-mjpeg-streamer
    privileged: true
    environment:
      - TZ=America/Mexico_City
      - VIDEO_DEVICE=${VIDEO_DEVICE:-/dev/video0}
      - SERVER_TCP_PORT=${SERVER_TCP_PORT:-9081}
    network_mode: host
    ports:
      - 8080:8080
    devices:
      - /dev

  opencv:
    build:
      context: ./opencv/
      dockerfile: Dockerfile.opencv
    image: xe1gyq/opencv
    container_name: services-opencv
    environment:
      - TZ=America/Mexico_City
    network_mode: host
    devices:
      - /dev

  openvino:
    build:
      context: ./openvino/
      dockerfile: Dockerfile.openvino
    image: xe1gyq/openvino
    container_name: services-openvino
    environment:
      - TZ=America/Mexico_City
    network_mode: host
    devices:
      - /dev

  openvino-official:
    build:
      context: ./openvino-official/
      dockerfile: Dockerfile.openvino-official
    image: xe1gyq/openvino-official
    container_name: services-openvino-official
    environment:
      - TZ=America/Mexico_City
    network_mode: host
    devices:
      - /dev

  filehash:
    build:
      context: ./filehash/
      dockerfile: Dockerfile.filehash
    image: xe1gyq/filehash
    container_name: services-filehash
    privileged: true
    environment:
      - TZ=America/Mexico_City
    network_mode: host
    devices:
      - /dev
    volumes:
      - ../media/:/media/

  jupyter:
    build:
      context: ./jupyter/
      dockerfile: Dockerfile.jupyter
    image: xe1gyq/jupyter
    container_name: services-jupyter
    environment:
      - TZ=America/Mexico_City
    network_mode: host
    devices:
      - /dev

  doods:
    image: snowzach/doods
    container_name: services-doods
    restart: always
    network_mode: host
    ports:
      - 8080:8080

  deepstack:
    image: deepquestai/deepstack
    container_name: oochelbeh-deepstack
    restart: always
    ports:
      - 5000:5000
    environment:
      - API-KEY=${DEEPSTACK_API_KEY}
      - MODE=${DEEPSTACK_MODE:-High}
      - VISION-DETECTION=${DEEPSTACK_VISION_DETECTION:-True}
      - VISION-FACE=${DEEPSTACK_VISION_FACE:-False}
      - DEEPSTACK_DATASTORE=${DEEPSTACK_DATASTORE:-`pwd`/media/deepstack/datastore/}
    volumes:
      - $PWD/media/deepstack/datastore/:/datastore

  objectbox:
    image: machinebox/objectbox
    container_name: oochelbeh-objectbox
    restart: always
    ports:
      - 8080:8080
    environment:
      - MB_KEY=${MB_KEY}
      - MB_PORT=${MB_PORT:-8080}
      - MB_OBJECTBOX_ANNOTATION_TOOL=${MB_OBJECTBOX_ANNOTATION_TOOL:-False}
      - MB_OBJECTBOX_BOXDATA=${MB_OBJECTBOX_BOXDATA:-`pwd`/media/machinebox/boxdata}
    volumes:
      - $PWD/media/machinebox/boxdat:/boxdata
